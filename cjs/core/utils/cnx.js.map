{"version":3,"file":"cnx.js","sources":["../../../../../../src/core/utils/cnx.ts"],"sourcesContent":["/**\n * Memungkinkan menerima lebih dari satu nilaiPertama dan nilaiKedua:\n *- Kami menggunakan rest parameter `...additionalClassNames` yang mengizinkan lebih dari satu argumen untuk nilaiKedua.\n *- Dengan demikian, Anda dapat menggunakan fungsi **`cnx`** dengan memberikan banyak nilaiPertama dan nilaiKedua, seperti dalam contoh berikut:\n  ```js\n  const className = cnx(\n    ['class_root', `variant-${variant}`, `size-${props.size}`, !(variant === 'unstyled') && classes.root],\n    classNames?.root,\n    className\n  );\n  ...\n  * // Contoh dengan banyak nilaiPertama dan nilaiKedua\n  * <div className={cnx(['class1', 'class2'], classNames?.root, className, `additionalClass`, `additionalClass`)} />\n\n  // Contoh penggunaan di komponen induk\n  * <ModuleComponent className=\"h-6 w-6\" />\n  * <ModuleComponent className={['h-6', 'w-6']} />\n  ```\n *- Dengan ini, fungsi cnx dapat menerima lebih dari satu nilaiPertama dan nilaiKedua untuk menggabungkan kelas-kelas dengan lebih fleksibel.\n *>\n */\nexport function cnx(\n  classNames: (string | false | undefined) | (string | false | undefined)[],\n  ...additionalClassNames: (string | false | undefined | null)[]\n): string {\n  let classNamesArray = Array.isArray(classNames) ? classNames : [classNames];\n\n  // Filtering untuk menghapus nilai false dan undefined\n  classNamesArray = classNamesArray.filter((className) => typeof className === 'string');\n\n  const combinedClassNames = [...classNamesArray];\n\n  additionalClassNames.forEach((className) => {\n    if (className) {\n      combinedClassNames.push(className);\n    }\n  });\n\n  return combinedClassNames.join(' ');\n}\n\n/**\n * Memungkinkan menerima lebih dari satu nilaiPertama dan nilaiKedua:\n *- Kami menggunakan rest parameter `...additionalClassNames` yang mengizinkan lebih dari satu argumen untuk nilaiKedua.\n *- Kemudian, kami menggunakan metode filter(Boolean) untuk menghapus nilai-nilai undefined dan null dari classNamesArray agar tetap rapi.\n *- Melakukan iterasi pada additionalClassNames menggunakan forEach, dan jika ada nilai yang tidak undefined atau null, maka kita tambahkan ke combinedClassNames.\n *- Dengan demikian, Anda dapat menggunakan fungsi cnx dengan memberikan banyak nilaiPertama dan nilaiKedua, seperti dalam contoh berikut:\n  ```js\n  const classNames = cnx(\n    ['NextButton_root', `variant-${variant}`, `size-${props.size}`, classes.root],\n    classNames?.root,\n    className\n  );\n  ...\n  // Contoh penggunaan di komponen induk\n  const ParentComponent = () => {\n    return (\n      <>\n        <ModuleComponent />\n        <ModuleComponent className=\"h-6 w-6\" />\n        <ModuleComponent className={['h-6', 'w-6']} />\n\n  // Contoh dengan banyak nilaiPertama dan nilaiKedua\n        <div className={cnx(['class1', 'class2'], classNames?.root, className, 'additionalClass1', 'additionalClass2')} />\n      </>\n    );\n  };\n\n  ```\n *- Dengan ini, fungsi cnx dapat menerima lebih dari satu nilaiPertama dan nilaiKedua untuk menggabungkan kelas-kelas dengan lebih fleksibel.\n */\n"],"names":[],"mappings":";;;;AAAO,SAAS,GAAG,CAAC,UAAU,EAAE,GAAG,oBAAoB,EAAE;AACzD,EAAE,IAAI,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,UAAU,GAAG,CAAC,UAAU,CAAC,CAAC;AAC9E,EAAE,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,SAAS,KAAK,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC;AACzF,EAAE,MAAM,kBAAkB,GAAG,CAAC,GAAG,eAAe,CAAC,CAAC;AAClD,EAAE,oBAAoB,CAAC,OAAO,CAAC,CAAC,SAAS,KAAK;AAC9C,IAAI,IAAI,SAAS,EAAE;AACnB,MAAM,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACzC,KAAK;AACL,GAAG,CAAC,CAAC;AACL,EAAE,OAAO,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACtC;;;;"}